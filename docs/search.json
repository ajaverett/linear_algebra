[
  {
    "objectID": "p3.html#the-workflow-for-solving-a-linear-system",
    "href": "p3.html#the-workflow-for-solving-a-linear-system",
    "title": "3  Solving Linear Systems",
    "section": "The workflow for solving a linear system",
    "text": "The workflow for solving a linear system\n\nThe linear system is written out in a system of equations.\nConvert the system of equations to an augmented matrix.\nUse elementary row operations to reduce the matrix to row echelon form.\nConvert the reduced row echelon form back to a system of equations.\n\n\nInfinitely Many Solutions Example\n\nStep 1Step 2Step 3Step 4Finish\n\n\n\nThe linear system is written out in a system of equations.\n\nHere is a linear system written as a system of equations.\n\\[\n\\begin{cases}\n&\\;\\;x_1 &- &3x_2 &+ &4x_3 &= -4 \\\\\n&3x_1 &- &7x_2 &+ &7x_3 &= -8 \\\\\n&2x_1 &- &6x_2 &- &8x_3 &= -8\n\\end{cases}\n\\]\n\n\n\nConvert the system of equations to an augmented matrix.\n\nThe system of equations is converted to an augmented matrix.\n\\[\n\\begin{cases}\n&\\;\\;x_1 &- &3x_2 &+ &4x_3 &= -4 \\\\\n&3x_1 &- &7x_2 &+ &7x_3 &= -8 \\\\\n&2x_1 &- &6x_2 &- &8x_3 &= -8\n\\end{cases}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\left[\\begin{array}{ccc|c}\n1 & -3 & 4 & -4 \\\\\n3 & -7 & 7 & -8 \\\\\n2 & -6 & -8 & -8\n\\end{array}\\right]\n\\]\n\n\n\nUse elementary row operations to reduce the matrix to row echelon form.\n\n\\[\n\\left[\\begin{array}{ccc|c}\n1 & -3 & 4 & -4 \\\\\n3 & -7 & 7 & -8 \\\\\n2 & -6 & -8 & -8\n\\end{array}\\right]\n\\]\n\\[\n\\downarrow\n\\]\n\nimport sympy as sp\nfrom sympy import init_printing\ninit_printing()\n\nA = sp.Matrix([\n    [1, -3, 4, -4],\n    [3, -7, 7, -8],\n    [2, -6, 8, -8]\n])\n\nA.echelon_form()\n\n\\(\\displaystyle \\left[\\begin{matrix}1 & -3 & 4 & -4\\\\0 & 2 & -5 & 4\\\\0 & 0 & 0 & 0\\end{matrix}\\right]\\)\n\n\n\n\n\nConvert the reduced row echelon form back to a system of equations.\n\n\\[\n\\displaystyle \\left[\\begin{matrix}1 & -3 & 4 & -4\\\\0 & 2 & -5 & 4\\\\0 & 0 & 0 & 0\\end{matrix}\\right]\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{cases}\nx_1 &- &3x_2 &+ &4x_3 &= -4 \\\\\n& &\\;\\;2x_2 &- &5x_3 &= \\;\\;\\;4 \\\\\n& & & &0x_3 &= \\;\\;\\;0\n\\end{cases}\n\\]\n\n\nThe system of equations is written out as so:\n\\[\n\\begin{cases}\nx_1 &- &3x_2 &+ &4x_3 &= -4 \\\\\n& &2x_2 &- &5x_3 &= \\;\\;\\;4 \\\\\n& & & &0x_3 &= \\;\\;\\;0\n\\end{cases}\n\\]\nWe can see that the system is consistent because the last equation is \\(0x_3 = 0\\) which is always true. Therefore, the system has infinitely many solutions.\n\n\n\n\n\nNo Solution Example\n\nStep 1Step 2Step 3Step 4Finish\n\n\n\nThe linear system is written out in a system of equations.\n\nHere is a linear system written as a system of equations.\n\\[\n\\begin{cases}\n& & &\\;\\;x_2 &+ &4x_3 &= -5 \\\\\n&\\;\\;x_1 &- &3x_2 &+ &5x_3 &= -2 \\\\\n&3x_1 &+ &7x_2 &+ &7x_3 &= \\;\\;\\;6\n\\end{cases}\n\\]\n\n\n\nConvert the system of equations to an augmented matrix.\n\nThe system of equations is converted to an augmented matrix.\n\\[\n\\begin{cases}\n& & &\\;\\;x_2 &+ &4x_3 &= -5 \\\\\n&\\;\\;x_1 &- &3x_2 &+ &5x_3 &= -2 \\\\\n&3x_1 &+ &7x_2 &+ &7x_3 &= \\;\\;\\;6\n\\end{cases}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\left[\\begin{array}{ccc|c}\n0 & 1 & 4 & -5 \\\\\n1 & 3 & 5 & -2 \\\\\n3 & 7 & 7 & 6\n\\end{array}\\right]\n\\]\n\n\n\nUse elementary row operations to reduce the matrix to row echelon form.\n\n\\[\n\\left[\\begin{array}{ccc|c}\n0 & 1 & 4 & -5 \\\\\n1 & 3 & 5 & -2 \\\\\n3 & 7 & 7 & 6\n\\end{array}\\right]\n\\]\n\\[\n\\downarrow\n\\]\n\nimport sympy as sp  \nfrom sympy import init_printing\ninit_printing()\n\nA = sp.Matrix([\n    [0, 1, 4, -5],\n    [1, 3, 5, -2],\n    [3, 7, 7, 6]\n])\n\nA.echelon_form()\n\n\\(\\displaystyle \\left[\\begin{matrix}1 & 3 & 5 & -2\\\\0 & 1 & 4 & -5\\\\0 & 0 & 0 & 2\\end{matrix}\\right]\\)\n\n\n\n\n\nConvert the reduced row echelon form back to a system of equations.\n\n\\[\n\\displaystyle \\left[\\begin{matrix}1 & 3 & 5 & -2\\\\0 & 1 & 4 & -5\\\\0 & 0 & 0 & 2\\end{matrix}\\right]\n\\]\n\\[  \n\\downarrow\n\\]\n\\[\n\\begin{cases}\nx_1 &+ &3x_2 &+ &5x_3 &= -2 \\\\\n& &\\;\\;x_2 &+ &4x_3 &= -5 \\\\\n& & & &0x_3 &= \\;\\;\\;2\n\\end{cases}\n\\]\n\n\nThe system of equations is written out as so:\n\\[\n\\begin{cases}\nx_1 &+ &3x_2 &+ &5x_3 &= -2 \\\\\n& &\\;\\;x_2 &+ &4x_3 &= -5 \\\\\n& & & &0x_3 &= \\;\\;\\;2\n\\end{cases}\n\\]\nWe can see that the system is inconsistent because the last equation is \\(0x_3 = 2\\) which is impossible. No value of \\(x_3\\) will make this equation true. Therefore, the system has no solution."
  },
  {
    "objectID": "p2.html#elements-of-a-matrix",
    "href": "p2.html#elements-of-a-matrix",
    "title": "2  Row Reduction and Echelon Forms",
    "section": "Elements of a matrix",
    "text": "Elements of a matrix\nCheck out the following matrix:\n\\[\n\\left[\\begin{array}{ccc}\n    1 & 2 & 3 & 4 \\\\\n    0 & 5 & 6 & 7 \\\\\n    0 & 0 & 0 & 8 \\\\\n    0 & 0 & 0 & 0\n\\end{array}\\right]\n\\begin{array}{c}\n    \\leftarrow R_1 \\\\\n    \\leftarrow R_2 \\\\\n    \\leftarrow R_3 \\\\\n    \\leftarrow R_4\n\\end{array}\n\\]\n\nLeading Entries\nThe leading entry of a row is the first nonzero entry in that row. For example,\n\nthe leading entry of \\(R_1\\) is 1,\nthe leading entry of \\(R_2\\) is 5,\n\nthe leading entry of \\(R_3\\) is 8, and\n\\(R_4\\) has no leading entry.\n\n\n\nPivot Positions\nThe pivot positions of a matrix are the positions of the leading entries in the matrix.\n\nfor \\(R_1\\), the leading entry is in the first column,\nfor \\(R_2\\) the leading entry is in the second column,\n\nfor \\(R_3\\), the leading entry is in the fourth column, and\n\\(R_4\\) has no leading entry- thus no pivot position.\n\n\n\nZero Rows\nA zero row is a row that contains only zeros. In the example above, \\(R_4\\) is a zero row."
  },
  {
    "objectID": "p2.html#row-echelon-form",
    "href": "p2.html#row-echelon-form",
    "title": "2  Row Reduction and Echelon Forms",
    "section": "Row Echelon Form",
    "text": "Row Echelon Form\nA matrix is in row echelon form if it meets the following criteria:\n\nZero rows are at the bottom of the matrix.\nEach leading entry of a row is in a column to the right of the leading entry of the row above it.\nAll entries in a column below a leading entry are zeros.\n\nHere are some examples of matrices in row echelon form:\n\nSquareTall (m &gt; n)Wide (m &lt; n)General Form (sorta)\n\n\n\\[\n\\begin{bmatrix}\n    1 & 2 & 3 \\\\\n    0 & 4 & 5 \\\\\n    0 & 0 & 6\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n    2 & 3 & 4 \\\\\n    0 & 1 & 5 \\\\\n    0 & 0 & 3 \\\\\n    0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n  1 & 2 & 3 & 4 \\\\\n  0 & 0 & 0 & 0 \\\\\n  0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n    \\square & * & * & \\dots & * \\\\\n    0 & \\square & * & \\dots & * \\\\\n    0 & 0 & \\square & \\dots & * \\\\\n    \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    0 & 0 & 0 & \\dots & \\square \\\\\n    0 & 0 & 0 & \\dots & 0\n\\end{bmatrix}\n\\]\nwhere \\(\\square\\) represents a nonzero entry, and \\(*\\) represents any entry (possibly zero)."
  },
  {
    "objectID": "p2.html#reduced-row-echelon-form",
    "href": "p2.html#reduced-row-echelon-form",
    "title": "2  Row Reduction and Echelon Forms",
    "section": "Reduced Row Echelon Form",
    "text": "Reduced Row Echelon Form\nA matrix is in reduced row echelon form if it meets the following criteria:\n\nIt is in row echelon form.\nThe leading entry in each nonzero row is 1.\nEach leading 1 is the only nonzero entry in its column.\n\nHere are some examples of matrices in reduced row echelon form:\n\nSquareTall (m &gt; n)Wide (m &lt; n)General Form (sorta)\n\n\n\\[\n\\begin{bmatrix}\n    1 & 0 & 0 \\\\\n    0 & 1 & 0 \\\\\n    0 & 0 & 1\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n    1 & 0 & 0 \\\\\n    0 & 1 & 0 \\\\\n    0 & 0 & 1 \\\\\n    0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n  1 & 0 & 0 & 1 \\\\\n  0 & 1 & 0 & 2 \\\\\n  0 & 0 & 1 & 3\n\\end{bmatrix}\n\\]\n\n\n\\[\n\\begin{bmatrix}\n    1 & 0 & \\dots & 0 & * \\\\\n    0 & 1 & \\dots & 0 & * \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\n    0 & 0 & \\dots & 1 & * \\\\\n    0 & 0 & \\dots & 0 & 0\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "p2.html#elementary-row-operations",
    "href": "p2.html#elementary-row-operations",
    "title": "2  Row Reduction and Echelon Forms",
    "section": "Elementary Row Operations",
    "text": "Elementary Row Operations\nThere are three types of elementary row operations:\n\nSwap the positions of two rows.\n\n\\[\nR_i \\leftrightarrow R_j\n\\]\n\nMultiply a row by a non-zero scalar.\n\n\\[\nkR_i \\rightarrow R_i\n\\]\n\nAdd or subtract the multiple of one row to another row.\n\n\\[\nkR_i + R_j \\rightarrow R_j\n\\]"
  },
  {
    "objectID": "p2.html#the-row-reduction-algorithm",
    "href": "p2.html#the-row-reduction-algorithm",
    "title": "2  Row Reduction and Echelon Forms",
    "section": "The Row Reduction Algorithm",
    "text": "The Row Reduction Algorithm\nThe row reduction algorithm is a method for solving systems of linear equations. It is based on the idea that if two systems of equations have the same solution, then the augmented matrices of those systems are row equivalent. This means that the two matrices can be transformed into each other by a sequence of elementary row operations. The row reduction algorithm is used to transform a matrix into row echelon form or reduced row echelon form.\n\nThe Forward Phase\nThe forward phase of the row reduction algorithm is used to reduce a matrix to row echelon form. The steps are as follows:\n\nWrite the augmented matrix of the system of equations.\nBegin with the leftmost nonzero column. This is a pivot column. The pivot position is at the top. Select a nonzero entry in the pivot column as a pivot. If necessary, interchange rows to move this entry into the pivot position\nUse row replacement operations to create zeros in all positions below the pivot\nAssuming all the entries under the last pivot is zero, we can now ignore the row containing the pivot position and cover all rows, if any, above it. Apply steps 1-3 to the remaining submatrix. Repeat the process until there are no more nonzero rows to modify.\n\n\nStep 1Step 2Step 3Step 4Finish\n\n\nBelow is the augmented matrix of a system of equations.\n\\[\n\\begin{bmatrix}\n    0 & 3 & -6 & 6 \\\\\n    3 & -7 & 8 & -5 \\\\\n    3 & -9 & 12 & -9\n\\end{bmatrix}\n\\]\n\n\nStep 2 states: Begin with the leftmost nonzero column. This is a pivot column. The pivot position is at the top. Select a nonzero entry in the pivot column as a pivot. If necessary, interchange rows to move this entry into the pivot position.\n\\[\n\\begin{bmatrix}\n    \\mathbf{0} & 3 & -6 & 6 \\\\\n    \\mathbf{3} & -7 & 8 & -5 \\\\\n    \\mathbf{3} & -9 & 12 & -9\n\\end{bmatrix}\n\\]\nSince the first entry in \\(R_1\\) is a zero, we need to swap it with a row where the first entry is not a zero. We can swap \\(R_1\\) with \\(R_2\\) or \\(R_3\\).\n\\[\n\\begin{array}{c}\n     R_1 \\rightarrow \\\\\n     R_2 \\rightarrow \\\\\n     R_3 \\rightarrow \\\\\n\\end{array}\n\\left[\\begin{array}{ccc}\n    \\mathbf{0} & 3 & -6 & 6 \\\\\n    \\mathbf{3} & -7 & 8 & -5 \\\\\n    \\mathbf{3} & -9 & 12 & -9\n\\end{array}\\right]\n\\]\nWe can do the following:\n\\(R_1 \\leftrightarrow R_2 \\;\\;\\;\\) or \\(\\;\\;\\;R_1 \\leftrightarrow R_3\\)\nI guess, let’s do \\(R_1 \\leftrightarrow R_2\\)…\nSince we did an elementary row operation, we need to update our matrix into a new matrix:\n\\[\n\\begin{bmatrix}\n    \\mathbf{0} & 3 & -6 & 6 \\\\\n    \\mathbf{3} & -7 & 8 & -5 \\\\\n    \\mathbf{3} & -9 & 12 & -9\n\\end{bmatrix}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    \\mathbf{3} & -7 & 8 & -5  \\\\\n    \\mathbf{0} & 3 & -6 & 6   \\\\\n    \\mathbf{3} & -9 & 12 & -9\n\\end{bmatrix}\n\\]\n\n\nStep 3 states: Use row replacement operations to create zeros in all positions below the pivot.\n\\[\n\\begin{array}{c}\n    R_1\\rightarrow\\\\\n    R_2\\rightarrow\\\\\n    R_3\\rightarrow\\\\\n\\end{array}\n\\left[\\begin{array}{ccc}\n    \\mathbf{3} & -7 & 8 & -5  \\\\\n    \\mathbf{0} & 3 & -6 & 6   \\\\\n    \\mathbf{3} & -9 & 12 & -9\n\\end{array}\\right]\n\\]\nThe bottom left number \\(3\\) in \\(R_3\\) needs fixing since it is a non-zero entry below the pivot that we’re working with. We can do the elementary row operation: Add or subtract the multiple of one row to another row to fix this. \\[\nkR_i + R_j \\rightarrow R_j\n\\]\n\\[\n\\text{where } k = -1, i = 1, \\text{ and } j = 3\n\\]\n\\[\n-R_1 + R_3 \\rightarrow R_2\n\\]\nThe operation is performed as follows:\n\n\n\\[\n-R_1\n\\]\n\n\\[\n\\begin{align*}\n    &(-1)\\left[ -3,  \\;-7, \\;\\; 8, \\;\\;\\; -5 \\right] \\\\\n\\end{align*}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{align*}\n    &\\left[ (-1)3,  \\;(-1)-7, \\;\\; (-1)8, \\;\\;\\; (-1)-5 \\right] \\\\\n\\end{align*}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    -3, \\;\\;7, -8, \\;\\;5\n\\end{bmatrix}\n\\]\n\n\\[\nR_3\n\\]\n\n\\[\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n\\end{bmatrix}\n\\]\n\n\nBelow is what happens when we add the two rows together:\n\\[\n-R_1 + R_2\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{array}{cc}\n    &\\left[\\;-3,  \\;\\;\\;\\;7, \\;\\; -8, \\;\\;\\;\\; 5 \\right] \\\\\n    +\\; &\\left[ \\;\\;\\;3, \\;\\; -9, \\;\\;\\;12, \\; -9 \\right]\n\\end{array}\n\\]\n\\[\n\\rule{6cm}{0.4pt}\n\\]\n\\[\n=\\;\\;\\;\\;\\;\\begin{bmatrix}\n    \\;\\;0 & -2 & \\;\\;4 & -4 \\\\\n\\end{bmatrix}\n\\]\nNow, \\(\\left[0 \\; -2 \\;\\; 4 -4 \\right]\\) is the new \\(R_2\\).\nNew matrix:\n\\[\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n    0 & 3 & -6 & 6 \\\\\n    0 & -2 & 4 & -4\n\\end{bmatrix}\n\\]\n\n\nStep 4 states: Assuming all the entries under the last pivot is zero, we can now ignore the row containing the pivot position and cover all rows, if any, above it. Apply steps 1-3 to the remaining submatrix. Repeat the process until there are no more nonzero rows to modify.\nBelow, we can see that all the entries under the last pivot are zero, so we can ignore the row containing the pivot position and cover all rows, if any, above it.\n\\[\n\\begin{bmatrix}\n    \\bf{3} & -9 & 12 & -9 \\\\\n    \\bf{0} & 3 & -6 & 6 \\\\\n    \\bf{0} & 2 & 4 & 4\n\\end{bmatrix}\n\\]\n\n\\[\n\\text{Since everything below the 3 is a zero,}\n\\]\n\\[\n\\begin{array}{c}\n    \\text{we can ignore the first row now} \\rightarrow \\\\\n                                \\\\\n                                \\\\\n\\end{array}\n\\begin{bmatrix}\n    \\times & \\times & \\times & \\times \\\\\n    0 & \\bf{3} & -6 & 6 \\\\\n    0 & \\bf{-2} & 4 & -4\n\\end{bmatrix}\n\\]\nWe can now apply steps 1-3 to the remaining submatrix. Repeat the process until finished.\n\\[\n\\begin{array}{c}\n    R_1 \\rightarrow \\\\\n    R_2 \\rightarrow \\\\\n    R_3 \\rightarrow \\\\\n\\end{array}\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n    0 & 3 & -6 & 6 \\\\\n    0 & -2 & 4 & -4\n\\end{bmatrix}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\frac{2}{3}R_2 + R_3 \\rightarrow R_3\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n    0 & 3 & -6 & 6 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\nWe can now see that the matrix is in row echelon form.\n\\[\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n    0 & 3 & -6 & 6 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\nIf we were to solve this with python, we would do the following:\n\nimport sympy as sp  \nfrom sympy import init_printing\ninit_printing()\n\nA = sp.Matrix([\n    [0,  3,  -6,   6], \n    [3, -7,   8,  -5], \n    [3, -9,  12,  -9]])\n\nA.echelon_form()\n\n\\(\\displaystyle \\left[\\begin{matrix}3 & -7 & 8 & -5\\\\0 & 3 & -6 & 6\\\\0 & 0 & 0 & 0\\end{matrix}\\right]\\)\n\n\nNote that depending on step 2, we could have swapped \\(R_1\\) with \\(R_3\\) instead of \\(R_1\\) with \\(R_2\\). This would have resulted in a different matrix\n\n\n\n\n\nThe Backwards Phase\nThe backwards phase of the row reduction algorithm is used to reduce a matrix in row echelon form to reduced row echelon form. The reduced row echelon form of a matrix is unique. This means that there is only one reduced row echelon form for a given matrix. This is not true for row echelon form. A matrix can have many different row echelon forms. The steps are as follows:\n\nBeginning with the rightmost pivot and working upward and to the left, create zeros above each pivot. If a pivot is not 1, make it 1 by a scaling operation.\n\n\nStep 5aStep 5bStep 5cFinish\n\n\nStep five says: Beginning with the rightmost pivot and working upward and to the left, create zeros above each pivot. If a pivot is not 1, make it 1 by a scaling operation.\nBelow is the matrix from the previous example in row echelon form. Currently the only pivots are 3 and 3. We can make the rightmost pivot 1 by dividing the row by 3.\n\\[\n\\begin{bmatrix}\n    \\bf{3} & -9 & 12 & -9 \\\\\n    0 & \\bf{3} & -6 & 6 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\frac{1}{3}R_2 \\rightarrow R_2\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    \\bf{3} & -9 & 12 & -9 \\\\\n    0 & \\bf{1} & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\nFor the right most pivot, we can make the entries above it zero with elementary row operations.\n\\[\n\\begin{bmatrix}\n    3 & -9 & 12 & -9 \\\\\n    0 & \\bf{1} & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n9R_2 + R_1 \\rightarrow R_1\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    3 & 0 & -6 & 9 \\\\\n    0 & \\bf{1} & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\nNow we can make the leftmost pivot 1 by dividing the row by 3.\n\\[\n\\begin{bmatrix}\n    3 & 0 & -6 & 9 \\\\\n    0 & \\bf{1} & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\frac{1}{3}R_1 \\rightarrow R_1\n\\]\n\\[\n\\downarrow\n\\]\n\\[\n\\begin{bmatrix}\n    1 & 0 & -2 & 3 \\\\\n    0 & 1 & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\n\n\nWe can now see that the matrix is in reduced row echelon form.\n\\[\n\\begin{bmatrix}\n    1 & 0 & -2 & 3 \\\\\n    0 & 1 & -2 & 2 \\\\\n    0 & 0 & 0 & 0\n\\end{bmatrix}\n\\]\nAlternatively, we can solve this with python:\n\nimport sympy as sp  \nfrom sympy import init_printing\ninit_printing()\n\nA = sp.Matrix([\n    [0,  3,  -6,   6], \n    [3, -7,   8,  -5], \n    [3, -9,  12,  -9]])\n\nA.rref()[0]\n\n\\(\\displaystyle \\left[\\begin{matrix}1 & 0 & -2 & 3\\\\0 & 1 & -2 & 2\\\\0 & 0 & 0 & 0\\end{matrix}\\right]\\)\n\n\n\nimport sympy as sp  \nfrom sympy import init_printing\ninit_printing()\n\nA = sp.Matrix([\n    [3, -9,  12,  -9], \n    [0,  3,  -6,   6],\n    [0,  0,   0,   0]])\n\nA.rref()[0]\n\n\\(\\displaystyle \\left[\\begin{matrix}1 & 0 & -2 & 3\\\\0 & 1 & -2 & 2\\\\0 & 0 & 0 & 0\\end{matrix}\\right]\\)"
  },
  {
    "objectID": "p1.html",
    "href": "p1.html",
    "title": "1  Linear Systems",
    "section": "",
    "text": "Matrix Notation"
  },
  {
    "objectID": "p1.html#systems-of-linear-equations",
    "href": "p1.html#systems-of-linear-equations",
    "title": "1  Linear Systems",
    "section": "Systems of Linear Equations",
    "text": "Systems of Linear Equations\n\nSystems with a Single Solution\nBelow is a linear equation:\n\\[\n\\begin{cases}\nx_1 - 2x_2 = -1\n\\end{cases}\n\\]\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Declare variables\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equation\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ny1_vals = graph_eq1_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\n# Title and labels\nax.set_title('A single linear equation')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equation\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a linear equation\n\n\n\n\n\nA linear equation in the variables \\(x_1, x_2, \\ldots, x_n\\) is an equation that can be written in the form\n\\[\na_1x_1 + a_2x_2 + \\cdots + a_nx_n = b\n\\]\nwhere \\(b\\) and the coefficients \\(a_1, a_2, \\ldots, a_n\\) are real or complex numbers. The subscript \\(n\\) may be any positive integer.\n\n\n\nTake the following system of linear equations: \\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 3x_2 &= 3\n\\end{cases}\n\\]\nIf we plot these equations on a graph, we can see that they intersect at a single point. This point is the solution to the system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a system of linear equations\n\n\n\n\n\nA system of linear equations (or a linear system) is a collection of one or more linear equations involving the same variables- say \\(x_1, x_2, \\ldots, x_n\\). An example is\n\\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 3x_2 &= 3\n\\end{cases}\n\\]\nThe above system has two equations and two variables where \\(x_1, x_2\\) are the variables.\n\n\n\nThe equations above have only one solution since they intersect at a single point.\n\n\nCode\nfrom IPython.display import Markdown\n\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nMarkdown(f'$$\\n{sp.latex(solution)}\\n$$')\n\n\n\\[\n\\left\\{ x_{1} : 3, \\  x_{2} : 2\\right\\}\n\\]\n\n\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Plot the solution\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nsolution_x1 = solution[x1]\nsolution_x2 = solution[x2]\n\nax.scatter([solution_x1], [solution_x2], color='red', zorder=3)  \nax.text(solution_x1+.5, solution_x2-.5, '  Solution', fontsize=12)\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a solution\n\n\n\n\n\nA solution of a linear system is a list of numbers (\\(s_1, s_2, \\ldots, s_n\\)) that makes each equation a true statement when the values \\(s_1, s_2, \\ldots, s_n\\) are substituted for \\(x_1, x_2, \\ldots, x_n\\), respectively.\nFor example, the list of numbers, \\((3,2)\\), is a solution of the system above because, when the values \\(3,2\\) are substituted for \\(x_1, x_2\\), respectively, both equations are a true statement.\n\n\n\nThe above list, \\((3,2)\\), is the solution to the system of equations because it is the only list of numbers that makes both equations true. When we substitute \\(3\\) and \\(2\\) for \\(x_1\\) and \\(x_2\\) in the first equation, both equations turn out to be true!\n\\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 3x_2 &= 3\n\\end{cases}\n\\]\nturns into\n\\[\n\\begin{cases}\n&(3) &- 2(2) &= -1 \\;\\; &\\text{True!}\\\\\n-&(3) &+ 3(2) &= 3 \\;\\; &\\text{True!}\n\\end{cases}\n\\]\n\n\nSystems without a Single Solution\n\nNo Solution\nTake the following system of linear equations:\n\\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 2x_2 &= 3\n\\end{cases}\n\\]\nIf we plot these equations on a graph, we can see that they are parallel and never intersect. This means that there is no solution to this system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equations\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 2*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with no solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 2x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nInfinite Solutions\nTake the following system of linear equations:\n\\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 2x_2 &= 1\n\\end{cases}\n\\]\nIf we plot these equations on a graph, we can see that they are the same line. This means that there are an infinite number of solutions to this system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equations\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 2*x2, 1)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with infinite solutions')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 2x_2 = 1$', color='green', linestyle='dashed')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nA system of linear equations has\n\nno solution, or\nexactly one solution, or\ninfinitely many solutions."
  },
  {
    "objectID": "p1.html#converting-a-system-of-linear-equations-to-matrix-form",
    "href": "p1.html#converting-a-system-of-linear-equations-to-matrix-form",
    "title": "1  Linear Systems",
    "section": "Converting a system of linear equations to matrix form",
    "text": "Converting a system of linear equations to matrix form\nThe essential information of a linear system can be recorded compactly in a rectangular array called a matrix.\nThe following system of linear equations:\n\\[\n\\begin{cases}\n&x_1 &- 2x_2 &= -1\\\\\n-&x_1 &+ 3x_2 &= 3\n\\end{cases}\n\\]\nThe following matrix is called the coefficient matrix of the system, it contains the coefficients of the variables left of the equals sign:\n\\[\n\\begin{bmatrix}\n1 & -2\\\\\n-1 & 3\n\\end{bmatrix}\n\\]\nThe following matrix is called the augmented matrix of the system, it contains the coefficients of the variables left of the equals sign and the constants right of the equals sign (separated by a vertical line):\n\\[\n\\begin{bmatrix}\n1 & -2 &|& -1\\\\\n-1 & 3 &|& 3\n\\end{bmatrix}\n\\]"
  },
  {
    "objectID": "p1.html#dimensions-of-a-matrix",
    "href": "p1.html#dimensions-of-a-matrix",
    "title": "1  Linear Systems",
    "section": "Dimensions of a matrix:",
    "text": "Dimensions of a matrix:\nThe size of a matrix tells how many rows and columns it has. The augmented matrix above has 3 rows and 4 columns and is called a \\(3 \\times 4\\) (read “3 by 4”) matrix.\nIf m and n are positive integers, an m n matrix is a rectangular array of numbers with m rows and n columns. (The number of rows always comes first.) Matrix notation will simplify the calculations in the examples that follow\n\n\n\n\n\n\nTip\n\n\n\nIn matrix notation:\n\n\\(m\\) is the number of rows\n\\(n\\) is the number of columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Linear Algebra",
    "section": "",
    "text": "Linear Algebra"
  },
  {
    "objectID": "index.html#notation-for-systems-of-linear-equations",
    "href": "index.html#notation-for-systems-of-linear-equations",
    "title": "Linear Algebra",
    "section": "Notation for systems of linear equations",
    "text": "Notation for systems of linear equations\nSystem of Equations\n\\[\n\\begin{cases}\na_{11}x_1 & + &a_{12}x_2 &+ \\dots+ & a_{1n}x_n &= b_1 \\\\\na_{21}x_1 & + &a_{22}x_2 &+ \\dots+ & a_{2n}x_n &= b_2 \\\\\n\\vdots && \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{m1}x_1 & + &a_{m2}x_2 &+ \\dots+ & a_{mn}x_n &= b_m\n\\end{cases}\n\\]\nAugmented matrix: \\(\\begin{bmatrix}A|\\vec{b}\\end{bmatrix}\\)\n\\[\n\\left[\\begin{array}{@{}cccc|c@{}}\na_{11} & a_{12} & \\dots & a_{1n} & b_1 \\\\\na_{21} & a_{22} & \\dots & a_{2n} & b_2 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{m1} & a_{m2} & \\dots & a_{mn} & b_m\n\\end{array}\\right]\n\\]\nVector Equation: \\(x_1\\vec{a_1}+x_2\\vec{a_2}+...+x_n\\vec{a_n}=\\vec{b}\\)\n\\[\nx_1\n\\begin{bmatrix}\na_{11}\\\\\na_{21}\\\\\n\\vdots\\\\\na_{m1}\n\\end{bmatrix} +\nx_2\n\\begin{bmatrix}\na_{12}\\\\\na_{22}\\\\\n\\vdots\\\\\na_{m2}\n\\end{bmatrix}+\n\\dots +\nx_n\n\\begin{bmatrix}\na_{1n}\\\\\na_{2n}\\\\\n\\vdots\\\\\na_{mn}\n\\end{bmatrix} =\n\\begin{bmatrix}\nb_1\\\\\nb_2\\\\\n\\vdots\\\\\nb_m\n\\end{bmatrix}\n\\]\nMatrix Equation: \\(A\\vec{x}=\\vec{b}\\)\n\\[\n\\begin{bmatrix}\na_{11} & a_{12} & \\dots & a_{1n} \\\\\na_{21} & a_{22} & \\dots & a_{2n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{m1} & a_{m2} & \\dots & a_{mn}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\n\\vdots \\\\\nx_n\n\\end{bmatrix}=\n\\begin{bmatrix}\nb_1 \\\\ b_2 \\\\ \\vdots \\\\ b_m\n\\end{bmatrix}\n\\]"
  }
]