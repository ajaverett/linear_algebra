[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Systems of Linear Equations",
    "section": "",
    "text": "Below is a linear equation:\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Declare variables\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equation\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ny1_vals = graph_eq1_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\n# Title and labels\nax.set_title('A single linear equation')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equation\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a linear equation\n\n\n\n\n\nA linear equation in the variables \\(x_1, x_2, \\ldots, x_n\\) is an equation that can be written in the form\n\\[a_1x_1 + a_2x_2 + \\cdots + a_nx_n = b\\]\nwhere \\(b\\) and the coefficients \\(a_1, a_2, \\ldots, a_n\\) are real or complex numbers. The subscript \\(n\\) may be any positive integer.\n\n\n\nTake the following system of linear equations: \\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 3x_2 &= 3\n\\end{align*}\n\\]\nIf we plot these equations on a graph, we can see that they intersect at a single point. This point is the solution to the system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a system of linear equations\n\n\n\n\n\nA system of linear equations (or a linear system) is a collection of one or more linear equations involving the same variables- say \\(x_1, x_2, \\ldots, x_n\\). An example is\n\\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 3x_2 &= 3\n\\end{align*}\n\\]\nThe above system has two equations and two variables where \\(x_1, x_2\\) are the variables.\n\n\n\nThe equations above have only one solution since they intersect at a single point.\n\n\nCode\nfrom IPython.display import Markdown\n\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nMarkdown(f'$$\\n{sp.latex(solution)}\\n$$')\n\n\n\\[\n\\left\\{ x_{1} : 3, \\  x_{2} : 2\\right\\}\n\\]\n\n\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Plot the solution\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nsolution_x1 = solution[x1]\nsolution_x2 = solution[x2]\n\nax.scatter([solution_x1], [solution_x2], color='red', zorder=3)  \nax.text(solution_x1+.5, solution_x2-.5, '  Solution', fontsize=12)\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a solution\n\n\n\n\n\nA solution of a linear system is a list of numbers (\\(s_1, s_2, \\ldots, s_n\\)) that makes each equation a true statement when the values \\(s_1, s_2, \\ldots, s_n\\) are substituted for \\(x_1, x_2, \\ldots, x_n\\), respectively.\nFor example, the list of numbers, \\((3,2)\\), is a solution of the system above because, when the values \\(3,2\\) are substituted for \\(x_1, x_2\\), respectively, both equations are a true statement.\n\n\n\nThe above list, \\((3,2)\\), is the solution to the system of equations because it is the only list of numbers that makes both equations true. When we substitute \\(3\\) for \\(x_1\\) and \\(2\\) for \\(x_2\\) in the first equation, we get \\(3 - 2(2) = -1\\) which is a true statement. When we substitute \\(3\\) for \\(x_1\\) and \\(2\\) for \\(x_2\\) in the second equation, we get \\(-(3) + 3(2) = 3\\) which is also a true statement.\n\\[\n\\begin{align*}\n3 - 2(2) &= -1\\\\\n-(3) + 3(2) &= 3\n\\end{align*}\n\\]\nthis simplifies to:\n\\[\n\\begin{align*}\n-1 &= -1\\\\\n3 &= 3\n\\end{align*}\n\\]\nwhich are both true statements."
  },
  {
    "objectID": "intro.html#systems-of-linear-equations-with-a-single-solution",
    "href": "intro.html#systems-of-linear-equations-with-a-single-solution",
    "title": "1  Systems of Linear Equations",
    "section": "1.1 Systems of Linear Equations with a Single Solution",
    "text": "1.1 Systems of Linear Equations with a Single Solution\nBelow is a linear equation:\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Declare variables\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equation\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ny1_vals = graph_eq1_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\n# Title and labels\nax.set_title('A single linear equation')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equation\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a linear equation\n\n\n\n\n\nA linear equation in the variables \\(x_1, x_2, \\ldots, x_n\\) is an equation that can be written in the form\n\\[a_1x_1 + a_2x_2 + \\cdots + a_nx_n = b\\]\nwhere \\(b\\) and the coefficients \\(a_1, a_2, \\ldots, a_n\\) are real or complex numbers. The subscript \\(n\\) may be any positive integer.\n\n\n\nTake the following system of linear equations: \\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 3x_2 &= 3\n\\end{align*}\n\\]\nIf we plot these equations on a graph, we can see that they intersect at a single point. This point is the solution to the system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a system of linear equations\n\n\n\n\n\nA system of linear equations (or a linear system) is a collection of one or more linear equations involving the same variables- say \\(x_1, x_2, \\ldots, x_n\\). An example is\n\\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 3x_2 &= 3\n\\end{align*}\n\\]\nThe above system has two equations and two variables where \\(x_1, x_2\\) are the variables.\n\n\n\nThe equations above have only one solution since they intersect at a single point.\n\n\nCode\nfrom IPython.display import Markdown\n\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nMarkdown(f'$$\\n{sp.latex(solution)}\\n$$')\n\n\n\\[\n\\left\\{ x_{1} : 3, \\  x_{2} : 2\\right\\}\n\\]\n\n\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 3*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with a single solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 3x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Plot the solution\nsolution = sp.solve((equation_1, equation_2), (x1, x2))\nsolution_x1 = solution[x1]\nsolution_x2 = solution[x2]\n\nax.scatter([solution_x1], [solution_x2], color='red', zorder=3)  \nax.text(solution_x1+.5, solution_x2-.5, '  Solution', fontsize=12)\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefinition of a solution\n\n\n\n\n\nA solution of a linear system is a list of numbers (\\(s_1, s_2, \\ldots, s_n\\)) that makes each equation a true statement when the values \\(s_1, s_2, \\ldots, s_n\\) are substituted for \\(x_1, x_2, \\ldots, x_n\\), respectively.\nFor example, the list of numbers, \\((3,2)\\), is a solution of the system above because, when the values \\(3,2\\) are substituted for \\(x_1, x_2\\), respectively, both equations are a true statement.\n\n\n\nThe above list, \\((3,2)\\), is the solution to the system of equations because it is the only list of numbers that makes both equations true. When we substitute \\(3\\) and \\(2\\) for \\(x_1\\) and \\(x_2\\) in the first equation, both equations turn out to be true!\n\\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 3x_2 &= 3\n\\end{align*}\n\\]\nturns into\n\\[\n\\begin{align*}\n(3) - 2(2) &= -1 \\;\\; &\\text{True!}\\\\\n-(3) + 3(2) &= 3 \\;\\; &\\text{True!}\n\\end{align*}\n\\]"
  },
  {
    "objectID": "intro.html#systems-of-linear-equations-without-a-single-solution",
    "href": "intro.html#systems-of-linear-equations-without-a-single-solution",
    "title": "1  Systems of Linear Equations",
    "section": "1.2 Systems of Linear Equations without a Single Solution",
    "text": "1.2 Systems of Linear Equations without a Single Solution\nNo Solution\nTake the following system of linear equations:\n\\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 2x_2 &= 3\n\\end{align*}\n\\]\nIf we plot these equations on a graph, we can see that they are parallel and never intersect. This means that there is no solution to this system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equations\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 2*x2, 3)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with no solution')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 2x_2 = 3$', color='green')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\nInfinite Solutions\nTake the following system of linear equations:\n\\[\n\\begin{align*}\nx_1 - 2x_2 &= -1\\\\\n-x_1 + 2x_2 &= 1\n\\end{align*}\n\\]\nIf we plot these equations on a graph, we can see that they are the same line. This means that there are an infinite number of solutions to this system of equations.\n\n\nCode\nimport sympy as sp\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx1, x2 = sp.symbols('x_1 x_2')\n\n# Define the equations\nequation_1 = sp.Eq(x1 - 2*x2, -1)\ngraph_eq1 = sp.solve(equation_1, x2)[0]\n\nequation_2 = sp.Eq(-x1 + 2*x2, 1)\ngraph_eq2 = sp.solve(equation_2, x2)[0]\n\n# Generate data for plotting\nx1_vals = np.linspace(-10, 10, 400)\ngraph_eq1_lambdified = sp.lambdify(x1, graph_eq1)\ngraph_eq2_lambdified = sp.lambdify(x1, graph_eq2)\ny1_vals = graph_eq1_lambdified(x1_vals)\ny2_vals = graph_eq2_lambdified(x1_vals)\n\n# Plotting\nfig, ax = plt.subplots(figsize=(7, 6))\n\nax.set_title('A system of equations with infinite solutions')\nax.set_xlabel('$x_1$                                                                                                                            ')\nax.set_ylabel('$x_2$                                                                                                    ')\n\n# Plot the equations\nax.plot(x1_vals, y1_vals, label='$x_1 - 2x_2 = -1$', color='blue')\nax.plot(x1_vals, y2_vals, label='$-x_1 + 2x_2 = 1$', color='green', linestyle='dashed')\n\n# Move the left and bottom spines to x = 0 and y = 0, respectively\nax.spines['left'].set_position('zero')\nax.spines['bottom'].set_position('zero')\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\n# Add legend and grid\nax.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nA system of linear equations has\n\nno solution, or\nexactly one solution, or\ninfinitely many solutions."
  }
]